[n.global]
output = treesitter_scala

[n.include]
$output/include
$output/scala/src

[n.prepare]
gitoutput.lang = "scala"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-scala"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
scala.nim

[treesitter_scala/scala/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_scala();
"""

[treesitter_scala/scala.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/scala/src/parser.h"
  ext = when "scala" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.compile: ("../treesitter_scala/scala/src/parser.c", "parserscala.o").}
{.compile: ("../treesitter_scala/scala/src/scanner." & ext, "scannerscala.o").}

proc treeSitterscala*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_scala", header: headerlang.}
"""
