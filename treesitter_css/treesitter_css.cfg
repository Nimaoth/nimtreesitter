[n.global]
output = treesitter_css

[n.include]
$output/include
$output/css/src

[n.prepare]
gitoutput.lang = "css"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-css"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
css.nim

[treesitter_css/css/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_css();
"""

[treesitter_css/css.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/css/src/parser.h"
  ext = when "css" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.compile: ("../treesitter_css/css/src/parser.c", "parsercss.o").}
{.compile: ("../treesitter_css/css/src/scanner." & ext, "scannercss.o").}

proc treeSittercss*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_css", header: headerlang.}
"""
