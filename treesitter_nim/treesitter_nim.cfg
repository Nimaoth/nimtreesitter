[n.global]
output = treesitter_nim

[n.include]
$output/include
$output/nim/src

[n.prepare]
gitoutput.lang = "nim"
gitbranch.lang = "main"
gitremote.lang = "https://github.com/aMOPel/tree-sitter-nim"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
nim.nim
scanner.cpp

[treesitter_nim/nim/src/parser.c]
flags = "-I:treesitter_nim/nim/src"
flags = "-I:treesitter_nim/nim/src/tree_sitter"

[treesitter_nim/nim/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_nim();
"""

[treesitter_nim/nim/src/scanner.cpp]
create = """
#include "scanner.cc"
"""

[treesitter_nim/nim.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/nim/src/parser.h"

{.compile: ("../treesitter_nim/nim/src/parser.c", "parser_nim.o").}
{.compile: ("../treesitter_nim/nim/src/scanner.cpp", "scanner_nim.o").}

proc treeSitterNim*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_nim", header: headerlang.}
"""
