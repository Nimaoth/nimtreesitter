[n.global]
output = treesitter

[n.include]
treesitter/include
treesitter/${LANG}/src

[n.prepare]
gitoutput.lang = "${LANG}"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-${HLANG}"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
"""

[n.exclude]
parser.h
${LANG}.nim

[treesitter/${LANG}/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_${LANG}();
"""

[treesitter/${LANG}.nim]
create = """
import treesitter/runtime
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/${LANG}/src/parser.h"
  ext = when "${LANG}" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.compile: ("../treesitter/${LANG}/src/parser.c", "parser${LANG}.o").}
{.compile: ("../treesitter/${LANG}/src/scanner." & ext, "scanner${LANG}.o").}

proc treeSitter${LANG}*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_${LANG}", header: headerlang.}
"""
