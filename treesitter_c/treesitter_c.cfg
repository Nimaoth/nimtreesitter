[n.global]
output = treesitter_c

[n.include]
$output/include
$output/c/src

[n.prepare]
gitoutput.lang = "c"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-c"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
c.nim

[treesitter_c/c/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_c();
"""

[treesitter_c/c.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/c/src/parser.h"

{.compile: ("../treesitter_c/c/src/parser.c", "parserc.o").}
# {.compile: ("../treesitter_c/c/src/scanner.c", "scannerc.o").}

proc treeSitterc*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_c", header: headerlang.}
"""
