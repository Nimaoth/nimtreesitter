[n.global]
output = treesitter_zig

[n.include]
$output/include
$output/zig/src

[n.prepare]
gitoutput.lang = "zig"
gitbranch.lang = "main"
gitremote.lang = "https://github.com/maxxnino/tree-sitter-zig"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
zig.nim
# scanner.cpp

[treesitter_zig/zig/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_zig();
"""

# [treesitter_zig/zig/src/scanner.cpp]
# create = """
# #include "scanner.cc"
# """

[treesitter_zig/zig.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/zig/src/parser.h"
  includeTreeSitter = "-I" & sourcePath & "/zig/src"

{.compile("../treesitter_zig/zig/src/parser.c", includeTreeSitter).}

proc treeSitterZig*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_zig", header: headerlang.}
"""
