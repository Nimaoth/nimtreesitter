[n.global]
output = treesitter

[n.include]
treesitter/include
treesitter/java/src

[n.prepare]
gitoutput.lang = "java"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-java"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
"""

[n.exclude]
parser.h
java.nim

[treesitter/java/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_java();
"""

[treesitter/java.nim]
create = """
import treesitter/runtime
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/java/src/parser.h"
  ext = when "java" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.compile: ("../treesitter/java/src/parser.c", "parserjava.o").}
{.compile: ("../treesitter/java/src/scanner." & ext, "scannerjava.o").}

proc treeSitterjava*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_java", header: headerlang.}
"""
