[n.global]
output = treesitter_rust

[n.include]
$output/include
$output/rust/src

[n.prepare]
gitoutput.lang = "rust"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-rust"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
rust.nim

[treesitter_rust/rust/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_rust();
"""

[treesitter_rust/rust.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/rust/src/parser.h"
  ext = when "rust" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.compile: ("../treesitter_rust/rust/src/parser.c", "parserrust.o").}
{.compile: ("../treesitter_rust/rust/src/scanner." & ext, "scannerrust.o").}

proc treeSitterrust*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_rust", header: headerlang.}
"""
