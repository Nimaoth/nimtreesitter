[n.global]
output = treesitter_c_sharp

[n.include]
$output/include
$output/c_sharp/src

[n.prepare]
gitoutput.lang = "c_sharp"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-c-sharp"
gitsparse.lang = """
src/*.h
src/*.c
src/*.cc
src/tree_sitter/*.h
"""

[n.exclude]
parser.h
c_sharp.nim

[treesitter_c_sharp/c_sharp/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_c_sharp();
"""

[treesitter_c_sharp/c_sharp.nim]
create = """
import treesitter/api
import std/[strutils, macros]
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/c_sharp/src/parser.h"
  includeTreeSitter = "-I" & sourcePath & "/c_sharp/src"

{.compile("../treesitter_c_sharp/c_sharp/src/parser.c", includeTreeSitter).}
{.compile("../treesitter_c_sharp/c_sharp/src/scanner.c", includeTreeSitter).}

proc treeSitterCSharp*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_c_sharp", header: headerlang.}
"""
